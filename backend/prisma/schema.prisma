// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // uncomment next line if you use Prisma <5.10
  // directUrl = env("DATABASE_URL_UNPOOLED")
}

// Models for Split Bill App

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String   // will be hashed
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  createdGroups Group[]    @relation("GroupCreator")
  memberships   Member[]
  expenses      Expense[]
}

model Group {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  creatorId String
  creator   User      @relation("GroupCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  members   Member[]
  expenses  Expense[]
}

model Member {
  id        String   @id @default(cuid())
  joinedAt  DateTime @default(now())

  // Relations
  userId  String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  groupId String
  group   Group  @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@unique([userId, groupId])
}

model Expense {
  id          String   @id @default(cuid())
  description String
  amount      Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  paidById String
  paidBy   User   @relation(fields: [paidById], references: [id], onDelete: Cascade)
  groupId  String
  group    Group  @relation(fields: [groupId], references: [id], onDelete: Cascade)
}
