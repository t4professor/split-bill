// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String        @id @default(uuid())
  firstName     String
  lastName      String
  userName      String        @unique
  email         String        @unique
  phoneNumber   String
  password      String
  avatarPath    String?
  paymentQrPath String?
  role          Role          @default(USER)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // Relations
  groupsCreated GroupMember[] @relation("UserGroups")
  createdGroups Group[]       @relation("GroupCreator")
  expenses      Expense[]     @relation("UserExpenses")
  paymentsFrom  Payment[]     @relation("PaymentsFrom")
  paymentsTo    Payment[]     @relation("PaymentsTo")
}

model Group {
  id          String        @id @default(uuid())
  name        String
  description String?
  inviteCode  String        @unique
  createdById String
  createdBy   User          @relation("GroupCreator", fields: [createdById], references: [id])
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  members     GroupMember[]
  expenses    Expense[]
  payments    Payment[]
}

model GroupMember {
  id        String   @id @default(uuid())
  groupId   String
  userId    String
  group     Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  user      User     @relation("UserGroups", fields: [userId], references: [id], onDelete: Cascade)
  joinedAt  DateTime @default(now())

  @@unique([groupId, userId])
}

model Expense {
  id          String   @id @default(uuid())
  description String
  amount      Float
  paidById    String
  paidBy      User     @relation("UserExpenses", fields: [paidById], references: [id])
  groupId     String
  group       Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Payment {
  id          String        @id @default(uuid())
  groupId     String
  fromUserId  String
  toUserId    String
  amount      Float
  note        String?
  status      PaymentStatus @default(CONFIRMED)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  group       Group         @relation(fields: [groupId], references: [id], onDelete: Cascade)
  fromUser    User          @relation("PaymentsFrom", fields: [fromUserId], references: [id])
  toUser      User          @relation("PaymentsTo", fields: [toUserId], references: [id])

  @@index([groupId])
  @@index([fromUserId])
  @@index([toUserId])
}

enum Role {
  USER
  ADMIN
}

enum PaymentStatus {
  CONFIRMED
  PENDING
  CANCELLED
}
